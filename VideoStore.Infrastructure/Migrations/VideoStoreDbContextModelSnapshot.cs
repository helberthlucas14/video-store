// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoStore.Infrastructure.Persistence;

namespace VideoStore.Infrastructure.Migrations
{
    [DbContext(typeof(VideoStoreDbContext))]
    partial class VideoStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VideoStore.Application.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Terror"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Documentary"
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("VoteAvarage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("VoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("[Title] IS NOT NULL");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 3.0,
                            Title = "Movie Best 1",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 4.0,
                            Title = "Movie Best 2",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 1.0,
                            Title = "Movie Best 3",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 2.0,
                            Title = "Movie Best 4",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 8.0,
                            Title = "Movie Best 5",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 6,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 2.0,
                            Title = "Movie Best 6",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 7,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 5.0,
                            Title = "Movie Best 7",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 8,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 2.0,
                            Title = "Movie Best 8",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        },
                        new
                        {
                            Id = 9,
                            Active = false,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Overview = "",
                            Popularity = 1.0,
                            Title = "Movie Best 9",
                            VoteAvarage = 0.0,
                            VoteCount = 0
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("MovieActor");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            PeopleId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            PeopleId = 2
                        },
                        new
                        {
                            MovieId = 1,
                            PeopleId = 3
                        },
                        new
                        {
                            MovieId = 1,
                            PeopleId = 5
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 14
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 13
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 12
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 11
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 10
                        },
                        new
                        {
                            MovieId = 3,
                            PeopleId = 8
                        },
                        new
                        {
                            MovieId = 3,
                            PeopleId = 9
                        },
                        new
                        {
                            MovieId = 3,
                            PeopleId = 1
                        },
                        new
                        {
                            MovieId = 4,
                            PeopleId = 4
                        },
                        new
                        {
                            MovieId = 4,
                            PeopleId = 5
                        },
                        new
                        {
                            MovieId = 4,
                            PeopleId = 8
                        },
                        new
                        {
                            MovieId = 4,
                            PeopleId = 9
                        },
                        new
                        {
                            MovieId = 5,
                            PeopleId = 6
                        },
                        new
                        {
                            MovieId = 5,
                            PeopleId = 1
                        },
                        new
                        {
                            MovieId = 5,
                            PeopleId = 3
                        },
                        new
                        {
                            MovieId = 6,
                            PeopleId = 2
                        },
                        new
                        {
                            MovieId = 6,
                            PeopleId = 1
                        },
                        new
                        {
                            MovieId = 7,
                            PeopleId = 3
                        },
                        new
                        {
                            MovieId = 7,
                            PeopleId = 6
                        },
                        new
                        {
                            MovieId = 8,
                            PeopleId = 13
                        },
                        new
                        {
                            MovieId = 8,
                            PeopleId = 11
                        },
                        new
                        {
                            MovieId = 9,
                            PeopleId = 14
                        },
                        new
                        {
                            MovieId = 9,
                            PeopleId = 12
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieDirector", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("MovieDirector");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            PeopleId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            PeopleId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            PeopleId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            PeopleId = 5
                        },
                        new
                        {
                            MovieId = 5,
                            PeopleId = 5
                        },
                        new
                        {
                            MovieId = 6,
                            PeopleId = 6
                        },
                        new
                        {
                            MovieId = 7,
                            PeopleId = 7
                        },
                        new
                        {
                            MovieId = 8,
                            PeopleId = 8
                        },
                        new
                        {
                            MovieId = 9,
                            PeopleId = 9
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 6
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 5,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 5,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 6,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 6,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 6,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 7,
                            GenreId = 6
                        },
                        new
                        {
                            MovieId = 7,
                            GenreId = 4
                        },
                        new
                        {
                            MovieId = 8,
                            GenreId = 4
                        },
                        new
                        {
                            MovieId = 8,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 9,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 9,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 9,
                            GenreId = 7
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompany");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            ProductionCompanyId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            ProductionCompanyId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            ProductionCompanyId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            ProductionCompanyId = 5
                        },
                        new
                        {
                            MovieId = 5,
                            ProductionCompanyId = 5
                        },
                        new
                        {
                            MovieId = 6,
                            ProductionCompanyId = 6
                        },
                        new
                        {
                            MovieId = 7,
                            ProductionCompanyId = 7
                        },
                        new
                        {
                            MovieId = 8,
                            ProductionCompanyId = 8
                        },
                        new
                        {
                            MovieId = 9,
                            ProductionCompanyId = 9
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Tom Wall"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Noah"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "James"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Lucas"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Charlotte"
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Harper"
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Ava"
                        },
                        new
                        {
                            Id = 8,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Sophia"
                        },
                        new
                        {
                            Id = 9,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Benjamin"
                        },
                        new
                        {
                            Id = 10,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Elijah"
                        },
                        new
                        {
                            Id = 11,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Oliver"
                        },
                        new
                        {
                            Id = 12,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Olivia"
                        },
                        new
                        {
                            Id = 13,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Liam"
                        },
                        new
                        {
                            Id = 14,
                            Biography = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            Birthday = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "male",
                            Name = "Emma"
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ProductionCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NetFlix"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fox"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Paramount"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pixar"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Marv Films"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pinewood Studios"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Shepperton Studios"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Three Mills Studios"
                        },
                        new
                        {
                            Id = 9,
                            Name = "606 Films"
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Name = "Admin",
                            Password = "6f2cb9dd8f4b65e24e1c3f3fa5bc57982349237f11abceacd45bbcb74d621c25",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@user.com",
                            Name = "User",
                            Password = "e7f5c00bfc7067a49da98fa9b1eacd8d428a4632197edaa84c9dacd40ca35050",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieActor", b =>
                {
                    b.HasOne("VideoStore.Application.Entities.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoStore.Application.Entities.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("People");
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieDirector", b =>
                {
                    b.HasOne("VideoStore.Application.Entities.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoStore.Application.Entities.People", "People")
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("People");
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieGenre", b =>
                {
                    b.HasOne("VideoStore.Application.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoStore.Application.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("VideoStore.Application.Entities.MovieProductionCompany", b =>
                {
                    b.HasOne("VideoStore.Application.Entities.Movie", "Movie")
                        .WithMany("ProductionComapanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoStore.Application.Entities.ProductionCompany", "ProductionCompany")
                        .WithMany()
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("VideoStore.Application.Entities.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Directors");

                    b.Navigation("Genres");

                    b.Navigation("ProductionComapanies");
                });
#pragma warning restore 612, 618
        }
    }
}
